// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hostManager.proto

/*
Package HostManager is a generated protocol buffer package.

It is generated from these files:
	hostManager.proto

It has these top-level messages:
	PrecheckRequest
	InitOrPrecheckReply
	LoginInfo
	TaskResult
	InitRequest
	InstallRequest
	InstallJobs
	InstallRequest2
	HostInstallJobs
	HostInstallTask
	InstallMessage
*/
package HostManager

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PrecheckRequest struct {
	LoginInfos []*LoginInfo `protobuf:"bytes,1,rep,name=loginInfos" json:"loginInfos,omitempty"`
}

func (m *PrecheckRequest) Reset()                    { *m = PrecheckRequest{} }
func (m *PrecheckRequest) String() string            { return proto.CompactTextString(m) }
func (*PrecheckRequest) ProtoMessage()               {}
func (*PrecheckRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PrecheckRequest) GetLoginInfos() []*LoginInfo {
	if m != nil {
		return m.LoginInfos
	}
	return nil
}

type InitOrPrecheckReply struct {
	Results []*TaskResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *InitOrPrecheckReply) Reset()                    { *m = InitOrPrecheckReply{} }
func (m *InitOrPrecheckReply) String() string            { return proto.CompactTextString(m) }
func (*InitOrPrecheckReply) ProtoMessage()               {}
func (*InitOrPrecheckReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *InitOrPrecheckReply) GetResults() []*TaskResult {
	if m != nil {
		return m.Results
	}
	return nil
}

type LoginInfo struct {
	Host     string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Port     int32  `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	UserName string `protobuf:"bytes,3,opt,name=userName" json:"userName,omitempty"`
	Passwd   string `protobuf:"bytes,4,opt,name=passwd" json:"passwd,omitempty"`
}

func (m *LoginInfo) Reset()                    { *m = LoginInfo{} }
func (m *LoginInfo) String() string            { return proto.CompactTextString(m) }
func (*LoginInfo) ProtoMessage()               {}
func (*LoginInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LoginInfo) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *LoginInfo) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *LoginInfo) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *LoginInfo) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

type TaskResult struct {
	Host    string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Status  string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Reason  string `protobuf:"bytes,4,opt,name=reason" json:"reason,omitempty"`
}

func (m *TaskResult) Reset()                    { *m = TaskResult{} }
func (m *TaskResult) String() string            { return proto.CompactTextString(m) }
func (*TaskResult) ProtoMessage()               {}
func (*TaskResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TaskResult) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *TaskResult) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *TaskResult) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *TaskResult) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type InitRequest struct {
	Labels     map[string]string `protobuf:"bytes,1,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	LoginInfos []*LoginInfo      `protobuf:"bytes,2,rep,name=loginInfos" json:"loginInfos,omitempty"`
}

func (m *InitRequest) Reset()                    { *m = InitRequest{} }
func (m *InitRequest) String() string            { return proto.CompactTextString(m) }
func (*InitRequest) ProtoMessage()               {}
func (*InitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *InitRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *InitRequest) GetLoginInfos() []*LoginInfo {
	if m != nil {
		return m.LoginInfos
	}
	return nil
}

type InstallRequest struct {
	Labels map[string]string       `protobuf:"bytes,1,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Jobs   map[string]*InstallJobs `protobuf:"bytes,2,rep,name=jobs" json:"jobs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *InstallRequest) Reset()                    { *m = InstallRequest{} }
func (m *InstallRequest) String() string            { return proto.CompactTextString(m) }
func (*InstallRequest) ProtoMessage()               {}
func (*InstallRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *InstallRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *InstallRequest) GetJobs() map[string]*InstallJobs {
	if m != nil {
		return m.Jobs
	}
	return nil
}

type InstallJobs struct {
	AnsibleJobs []string `protobuf:"bytes,1,rep,name=ansibleJobs" json:"ansibleJobs,omitempty"`
}

func (m *InstallJobs) Reset()                    { *m = InstallJobs{} }
func (m *InstallJobs) String() string            { return proto.CompactTextString(m) }
func (*InstallJobs) ProtoMessage()               {}
func (*InstallJobs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *InstallJobs) GetAnsibleJobs() []string {
	if m != nil {
		return m.AnsibleJobs
	}
	return nil
}

type InstallRequest2 struct {
	Labels map[string]string  `protobuf:"bytes,1,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Jobs   []*HostInstallJobs `protobuf:"bytes,2,rep,name=jobs" json:"jobs,omitempty"`
}

func (m *InstallRequest2) Reset()                    { *m = InstallRequest2{} }
func (m *InstallRequest2) String() string            { return proto.CompactTextString(m) }
func (*InstallRequest2) ProtoMessage()               {}
func (*InstallRequest2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *InstallRequest2) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *InstallRequest2) GetJobs() []*HostInstallJobs {
	if m != nil {
		return m.Jobs
	}
	return nil
}

type HostInstallJobs struct {
	Host  string             `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Tasks []*HostInstallTask `protobuf:"bytes,2,rep,name=tasks" json:"tasks,omitempty"`
}

func (m *HostInstallJobs) Reset()                    { *m = HostInstallJobs{} }
func (m *HostInstallJobs) String() string            { return proto.CompactTextString(m) }
func (*HostInstallJobs) ProtoMessage()               {}
func (*HostInstallJobs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *HostInstallJobs) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *HostInstallJobs) GetTasks() []*HostInstallTask {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type HostInstallTask struct {
	Name   string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type   string            `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Params map[string]string `protobuf:"bytes,3,rep,name=params" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *HostInstallTask) Reset()                    { *m = HostInstallTask{} }
func (m *HostInstallTask) String() string            { return proto.CompactTextString(m) }
func (*HostInstallTask) ProtoMessage()               {}
func (*HostInstallTask) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *HostInstallTask) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HostInstallTask) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *HostInstallTask) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

type InstallMessage struct {
	Job      string `protobuf:"bytes,1,opt,name=job" json:"job,omitempty"`
	Type     string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Host     string `protobuf:"bytes,3,opt,name=host" json:"host,omitempty"`
	Step     int32  `protobuf:"varint,4,opt,name=step" json:"step,omitempty"`
	Name     string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Status   string `protobuf:"bytes,6,opt,name=status" json:"status,omitempty"`
	Message  string `protobuf:"bytes,7,opt,name=message" json:"message,omitempty"`
	Ok       int32  `protobuf:"varint,8,opt,name=ok" json:"ok,omitempty"`
	Changed  int32  `protobuf:"varint,9,opt,name=changed" json:"changed,omitempty"`
	Unreach  int32  `protobuf:"varint,10,opt,name=unreach" json:"unreach,omitempty"`
	Failed   int32  `protobuf:"varint,11,opt,name=failed" json:"failed,omitempty"`
	Progress int32  `protobuf:"varint,12,opt,name=progress" json:"progress,omitempty"`
}

func (m *InstallMessage) Reset()                    { *m = InstallMessage{} }
func (m *InstallMessage) String() string            { return proto.CompactTextString(m) }
func (*InstallMessage) ProtoMessage()               {}
func (*InstallMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *InstallMessage) GetJob() string {
	if m != nil {
		return m.Job
	}
	return ""
}

func (m *InstallMessage) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *InstallMessage) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *InstallMessage) GetStep() int32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *InstallMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InstallMessage) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *InstallMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *InstallMessage) GetOk() int32 {
	if m != nil {
		return m.Ok
	}
	return 0
}

func (m *InstallMessage) GetChanged() int32 {
	if m != nil {
		return m.Changed
	}
	return 0
}

func (m *InstallMessage) GetUnreach() int32 {
	if m != nil {
		return m.Unreach
	}
	return 0
}

func (m *InstallMessage) GetFailed() int32 {
	if m != nil {
		return m.Failed
	}
	return 0
}

func (m *InstallMessage) GetProgress() int32 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func init() {
	proto.RegisterType((*PrecheckRequest)(nil), "HostManager.PrecheckRequest")
	proto.RegisterType((*InitOrPrecheckReply)(nil), "HostManager.InitOrPrecheckReply")
	proto.RegisterType((*LoginInfo)(nil), "HostManager.LoginInfo")
	proto.RegisterType((*TaskResult)(nil), "HostManager.TaskResult")
	proto.RegisterType((*InitRequest)(nil), "HostManager.InitRequest")
	proto.RegisterType((*InstallRequest)(nil), "HostManager.InstallRequest")
	proto.RegisterType((*InstallJobs)(nil), "HostManager.InstallJobs")
	proto.RegisterType((*InstallRequest2)(nil), "HostManager.InstallRequest2")
	proto.RegisterType((*HostInstallJobs)(nil), "HostManager.HostInstallJobs")
	proto.RegisterType((*HostInstallTask)(nil), "HostManager.HostInstallTask")
	proto.RegisterType((*InstallMessage)(nil), "HostManager.InstallMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HostManager service

type HostManagerClient interface {
	Precheck(ctx context.Context, in *PrecheckRequest, opts ...grpc.CallOption) (*InitOrPrecheckReply, error)
	InitHosts(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitOrPrecheckReply, error)
	Install(ctx context.Context, in *InstallRequest, opts ...grpc.CallOption) (HostManager_InstallClient, error)
	Install2(ctx context.Context, in *InstallRequest2, opts ...grpc.CallOption) (HostManager_Install2Client, error)
}

type hostManagerClient struct {
	cc *grpc.ClientConn
}

func NewHostManagerClient(cc *grpc.ClientConn) HostManagerClient {
	return &hostManagerClient{cc}
}

func (c *hostManagerClient) Precheck(ctx context.Context, in *PrecheckRequest, opts ...grpc.CallOption) (*InitOrPrecheckReply, error) {
	out := new(InitOrPrecheckReply)
	err := grpc.Invoke(ctx, "/HostManager.HostManager/Precheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostManagerClient) InitHosts(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitOrPrecheckReply, error) {
	out := new(InitOrPrecheckReply)
	err := grpc.Invoke(ctx, "/HostManager.HostManager/InitHosts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostManagerClient) Install(ctx context.Context, in *InstallRequest, opts ...grpc.CallOption) (HostManager_InstallClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_HostManager_serviceDesc.Streams[0], c.cc, "/HostManager.HostManager/Install", opts...)
	if err != nil {
		return nil, err
	}
	x := &hostManagerInstallClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HostManager_InstallClient interface {
	Recv() (*InstallMessage, error)
	grpc.ClientStream
}

type hostManagerInstallClient struct {
	grpc.ClientStream
}

func (x *hostManagerInstallClient) Recv() (*InstallMessage, error) {
	m := new(InstallMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hostManagerClient) Install2(ctx context.Context, in *InstallRequest2, opts ...grpc.CallOption) (HostManager_Install2Client, error) {
	stream, err := grpc.NewClientStream(ctx, &_HostManager_serviceDesc.Streams[1], c.cc, "/HostManager.HostManager/Install2", opts...)
	if err != nil {
		return nil, err
	}
	x := &hostManagerInstall2Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HostManager_Install2Client interface {
	Recv() (*InstallMessage, error)
	grpc.ClientStream
}

type hostManagerInstall2Client struct {
	grpc.ClientStream
}

func (x *hostManagerInstall2Client) Recv() (*InstallMessage, error) {
	m := new(InstallMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for HostManager service

type HostManagerServer interface {
	Precheck(context.Context, *PrecheckRequest) (*InitOrPrecheckReply, error)
	InitHosts(context.Context, *InitRequest) (*InitOrPrecheckReply, error)
	Install(*InstallRequest, HostManager_InstallServer) error
	Install2(*InstallRequest2, HostManager_Install2Server) error
}

func RegisterHostManagerServer(s *grpc.Server, srv HostManagerServer) {
	s.RegisterService(&_HostManager_serviceDesc, srv)
}

func _HostManager_Precheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrecheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostManagerServer).Precheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HostManager.HostManager/Precheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostManagerServer).Precheck(ctx, req.(*PrecheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostManager_InitHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostManagerServer).InitHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HostManager.HostManager/InitHosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostManagerServer).InitHosts(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostManager_Install_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InstallRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HostManagerServer).Install(m, &hostManagerInstallServer{stream})
}

type HostManager_InstallServer interface {
	Send(*InstallMessage) error
	grpc.ServerStream
}

type hostManagerInstallServer struct {
	grpc.ServerStream
}

func (x *hostManagerInstallServer) Send(m *InstallMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _HostManager_Install2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InstallRequest2)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HostManagerServer).Install2(m, &hostManagerInstall2Server{stream})
}

type HostManager_Install2Server interface {
	Send(*InstallMessage) error
	grpc.ServerStream
}

type hostManagerInstall2Server struct {
	grpc.ServerStream
}

func (x *hostManagerInstall2Server) Send(m *InstallMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _HostManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "HostManager.HostManager",
	HandlerType: (*HostManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Precheck",
			Handler:    _HostManager_Precheck_Handler,
		},
		{
			MethodName: "InitHosts",
			Handler:    _HostManager_InitHosts_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Install",
			Handler:       _HostManager_Install_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Install2",
			Handler:       _HostManager_Install2_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "hostManager.proto",
}

func init() { proto.RegisterFile("hostManager.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 803 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xcd, 0x6e, 0xe3, 0x36,
	0x10, 0x86, 0xec, 0xf8, 0x6f, 0x5c, 0x24, 0x29, 0x1b, 0x24, 0xaa, 0x9b, 0xa2, 0x06, 0xdb, 0xa2,
	0x46, 0x0e, 0x72, 0xa2, 0x02, 0x45, 0x12, 0x14, 0x68, 0x11, 0xa0, 0x40, 0x5c, 0x24, 0xad, 0x2b,
	0xf4, 0xd2, 0x23, 0x65, 0x33, 0xb2, 0x6c, 0x99, 0x54, 0x45, 0x3a, 0x85, 0xaf, 0x7d, 0x85, 0xde,
	0x8a, 0x7d, 0x8e, 0x3d, 0x2e, 0x76, 0x9f, 0x61, 0x5f, 0x61, 0x1f, 0x64, 0x41, 0x9a, 0xb2, 0x25,
	0x45, 0xf1, 0x66, 0x91, 0xdb, 0x0c, 0xe7, 0x9b, 0xf9, 0x38, 0x9f, 0xc4, 0x21, 0xe1, 0xd3, 0x09,
	0x17, 0xf2, 0x96, 0x30, 0x12, 0xd0, 0xc4, 0x89, 0x13, 0x2e, 0x39, 0x6a, 0x5f, 0x6f, 0x96, 0x3a,
	0xc7, 0x01, 0xe7, 0x41, 0x44, 0xfb, 0x24, 0x0e, 0xfb, 0x84, 0x31, 0x2e, 0x89, 0x0c, 0x39, 0x13,
	0x2b, 0x28, 0x1e, 0xc0, 0xde, 0x30, 0xa1, 0xa3, 0x09, 0x1d, 0xcd, 0x3c, 0xfa, 0xf7, 0x82, 0x0a,
	0x89, 0x7e, 0x00, 0x88, 0x78, 0x10, 0xb2, 0x01, 0xbb, 0xe3, 0xc2, 0xb6, 0xba, 0xd5, 0x5e, 0xdb,
	0x3d, 0x74, 0x32, 0x25, 0x9d, 0x9b, 0x34, 0xec, 0x65, 0x90, 0xf8, 0x1a, 0x3e, 0x1b, 0xb0, 0x50,
	0xfe, 0x9e, 0x6c, 0x0a, 0xc6, 0xd1, 0x12, 0x9d, 0x41, 0x23, 0xa1, 0x62, 0x11, 0xc9, 0xb4, 0xd6,
	0x51, 0xae, 0xd6, 0x9f, 0x44, 0xcc, 0x3c, 0x1d, 0xf7, 0x52, 0x1c, 0x0e, 0xa0, 0xb5, 0xa6, 0x40,
	0x08, 0x76, 0x54, 0x87, 0xb6, 0xd5, 0xb5, 0x7a, 0x2d, 0x4f, 0xdb, 0x6a, 0x2d, 0xe6, 0x89, 0xb4,
	0x2b, 0x5d, 0xab, 0x57, 0xf3, 0xb4, 0x8d, 0x3a, 0xd0, 0x5c, 0x08, 0x9a, 0xfc, 0x46, 0xe6, 0xd4,
	0xae, 0x6a, 0xec, 0xda, 0x47, 0x87, 0x50, 0x8f, 0x89, 0x10, 0xff, 0x8c, 0xed, 0x1d, 0x1d, 0x31,
	0x1e, 0x9e, 0x02, 0x6c, 0xf8, 0x4b, 0x99, 0x0e, 0xa1, 0x2e, 0x24, 0x91, 0x0b, 0xa1, 0xb9, 0x5a,
	0x9e, 0xf1, 0x90, 0x0d, 0x8d, 0x39, 0x15, 0x82, 0x04, 0x29, 0x59, 0xea, 0xaa, 0x8c, 0x84, 0x12,
	0xc1, 0x59, 0xca, 0xb5, 0xf2, 0xf0, 0x2b, 0x0b, 0xda, 0x4a, 0x9f, 0x54, 0xe6, 0x1f, 0xa1, 0x1e,
	0x11, 0x9f, 0x46, 0xa9, 0x2c, 0xdf, 0xe4, 0x64, 0xc9, 0x20, 0x9d, 0x1b, 0x0d, 0xfb, 0x85, 0xc9,
	0x64, 0xe9, 0x99, 0x9c, 0xc2, 0x47, 0xaa, 0x3c, 0xf5, 0x23, 0x75, 0x2e, 0xa0, 0x9d, 0x29, 0x87,
	0xf6, 0xa1, 0x3a, 0xa3, 0x4b, 0xd3, 0xb1, 0x32, 0xd1, 0x01, 0xd4, 0xee, 0x49, 0xb4, 0xa0, 0xa6,
	0xdf, 0x95, 0x73, 0x59, 0x39, 0xb7, 0xf0, 0xff, 0x15, 0xd8, 0x1d, 0x30, 0x21, 0x49, 0x14, 0xa5,
	0x3d, 0xfc, 0x54, 0xe8, 0xe1, 0xbb, 0x42, 0x0f, 0x59, 0x70, 0x69, 0x1b, 0x17, 0xb0, 0x33, 0xe5,
	0x7e, 0xda, 0xc0, 0xb7, 0xdb, 0xd2, 0x7f, 0xe5, 0xbe, 0x49, 0xd6, 0x29, 0xcf, 0xe8, 0xa4, 0xf3,
	0x07, 0xb4, 0xd6, 0xd5, 0x4a, 0x12, 0x9d, 0x6c, 0x62, 0xdb, 0xb5, 0xcb, 0x76, 0xa5, 0xf2, 0xb3,
	0xe2, 0xf4, 0xd5, 0xc7, 0x5d, 0x47, 0x50, 0x17, 0xda, 0x84, 0x89, 0xd0, 0x8f, 0xa8, 0x72, 0xb5,
	0x3a, 0x2d, 0x2f, 0xbb, 0x84, 0x5f, 0x5b, 0xb0, 0x97, 0xef, 0xd0, 0x45, 0x3f, 0x17, 0xe4, 0xec,
	0x6d, 0xd1, 0xc3, 0x2d, 0xd5, 0xf3, 0x34, 0xa7, 0xe7, 0x71, 0x2e, 0x5f, 0xd9, 0xd9, 0xdd, 0x3f,
	0x57, 0x46, 0xfc, 0x17, 0xec, 0x15, 0x6a, 0x96, 0x1e, 0x21, 0x17, 0x6a, 0x92, 0x88, 0xd9, 0x07,
	0x37, 0xa5, 0x4f, 0xe2, 0x0a, 0x8a, 0x5f, 0x5a, 0xb9, 0xda, 0x2a, 0xa4, 0x6a, 0x33, 0x75, 0xb8,
	0x4d, 0x6d, 0x65, 0xab, 0x35, 0xb9, 0x8c, 0xd3, 0xbd, 0x69, 0x5b, 0xa9, 0x18, 0x93, 0x84, 0xcc,
	0x85, 0x5d, 0x2d, 0x51, 0xb1, 0x50, 0xd5, 0x19, 0x6a, 0xa8, 0x51, 0x71, 0x95, 0xa7, 0x34, 0xc9,
	0x2c, 0x7f, 0x94, 0x26, 0x2f, 0x36, 0x87, 0xe4, 0xd6, 0x0c, 0x84, 0x7d, 0xa8, 0x4e, 0xb9, 0x9f,
	0xa6, 0x4f, 0xb9, 0x5f, 0xba, 0xeb, 0x54, 0xb9, 0x6a, 0x7e, 0xcc, 0x09, 0x49, 0x63, 0x3d, 0x48,
	0x6a, 0x9e, 0xb6, 0xd7, 0x2a, 0xd4, 0x32, 0x2a, 0x6c, 0x86, 0x54, 0xfd, 0xb1, 0x21, 0xd5, 0xc8,
	0x0f, 0xa9, 0x5d, 0xa8, 0xf0, 0x99, 0xdd, 0xd4, 0x75, 0x2b, 0x7c, 0xa6, 0x90, 0xa3, 0x09, 0x61,
	0x01, 0x1d, 0xdb, 0x2d, 0xbd, 0x98, 0xba, 0x2a, 0xb2, 0x60, 0x09, 0x25, 0xa3, 0x89, 0x0d, 0xab,
	0x88, 0x71, 0x15, 0xeb, 0x1d, 0x09, 0x23, 0x3a, 0xb6, 0xdb, 0x3a, 0x60, 0x3c, 0x35, 0x88, 0xe3,
	0x84, 0x07, 0x09, 0x15, 0xc2, 0xfe, 0x44, 0x47, 0xd6, 0xbe, 0xfb, 0xa6, 0x0a, 0xd9, 0xcb, 0x09,
	0x71, 0x68, 0xa6, 0xb7, 0x05, 0xca, 0xff, 0x18, 0x85, 0x5b, 0xa9, 0xd3, 0x7d, 0x30, 0x1e, 0x0b,
	0x17, 0x0d, 0xfe, 0xfa, 0xdf, 0xb7, 0xef, 0xfe, 0xab, 0x7c, 0x89, 0xed, 0xfe, 0xfd, 0x59, 0x5f,
	0xe9, 0x37, 0x5f, 0x81, 0xfb, 0xb1, 0x81, 0x5d, 0x5a, 0x27, 0x68, 0x02, 0x2d, 0x95, 0xab, 0x6a,
	0x09, 0x64, 0x3f, 0x36, 0x72, 0x9f, 0xc0, 0xf6, 0x95, 0x66, 0xfb, 0x1c, 0x1f, 0x14, 0xd9, 0x42,
	0x16, 0x4a, 0xc5, 0x14, 0x42, 0xc3, 0xfc, 0x08, 0xe8, 0x8b, 0x2d, 0xe7, 0xb8, 0x53, 0x1a, 0x34,
	0xff, 0x0e, 0xc6, 0x9a, 0xe5, 0x18, 0x1f, 0x3d, 0x64, 0xd1, 0xb8, 0x4b, 0xeb, 0xe4, 0xd4, 0x42,
	0x11, 0x34, 0x4d, 0x9e, 0x5b, 0x50, 0xb1, 0x30, 0x33, 0xb6, 0x93, 0x3d, 0x2a, 0xa0, 0x21, 0x73,
	0x35, 0xdb, 0xd5, 0x39, 0xe0, 0x11, 0x9f, 0x3b, 0x7e, 0xc8, 0x02, 0x9f, 0xf8, 0xc4, 0x51, 0x48,
	0x32, 0x9e, 0x87, 0xcc, 0xc9, 0xbc, 0x44, 0xae, 0xf6, 0x33, 0x44, 0x43, 0xf5, 0xd4, 0x18, 0x5a,
	0x7e, 0x5d, 0xbf, 0x39, 0xbe, 0x7f, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x98, 0xd4, 0x52, 0x97, 0xb3,
	0x08, 0x00, 0x00,
}
